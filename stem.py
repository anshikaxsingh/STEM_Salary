# -*- coding: utf-8 -*-
"""STEM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EKoYNNd_H4k7qeMvxChf5JIJWL1axBUP
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# %matplotlib inline

from google.colab import files
uploaded = files.upload()

currency = pd.read_csv("Levels_Fyi_Salary_Data.csv")
currency.shape

currency.head()

currency.info()

currency.columns

currency_up = currency[['timestamp', 'company', 'title', 'totalyearlycompensation',
       'location', 'yearsofexperience', 'yearsatcompany','gender','Race', 'Education']]
currency.head()

currency_up.info()

currency_up.isnull().sum()

currency_up = currency_up.fillna({'company': 'Unknown', 'gender':'Unknown','Race':'Unknown','Education':'Unknown'})
currency_up.isnull().sum()

len(currency_up["company"].unique())

#EDA
#UNI-VARIATE analysis

top_companies = currency_up["company"].value_counts().head(10)
plt.figure(figsize = (7,5))
fig = px.bar(x = top_companies.index, y = top_companies.values,hover_name = top_companies.values,template = "plotly_dark",
            labels = {"x" : "Company" , "y" : "Number of Jobs" })
fig.show()

currency_up["title"].value_counts()

not_req = ["Marketing","Mechanical Engineer","Sales","Human Resources","Recruiter"]
currency_up_original = currency_up.copy()
currency_up = currency_up[currency_up["title"].apply(lambda x: x not in not_req)]
currency_up.shape

top_comp = currency_up["title"].value_counts()
fig = px.bar(x = top_comp.index, y= top_comp.values,labels = {"x" : "Title","y" : "Number of Current Jobs"},
             title = "Number of Workers in Each Job Title",template = "plotly_solar")
fig.show()

loctn = currency_up["location"].value_counts().head(15)
px.box(currency_up, x = "totalyearlycompensation",title = "Total Compensation Distribution", template = "plotly_dark"
      ,labels = { "totalyearlycompensation" : "Compensation"})

currency_up[currency_up["totalyearlycompensation"] >458000].shape

currency_up["location"].nunique()

px.bar(x= loctn.index, y = loctn.values, template = "plotly_dark",
      labels = {"x" : "Locations","y" : "Number of Employee based on location"},
      title = "Jobs based on Locations")

#df[df["gender"]== "Title: Senior Software Engineer"]
#df.drop(index = 11010,inplace = True)
px.pie(currency_up, names = currency_up["gender"].value_counts().index, values = currency_up["gender"].value_counts().values,
       title = "Gender Distribution",template = "plotly_dark")

px.pie(currency_up, names = currency_up["Race"].value_counts().index, values = currency_up["Race"].value_counts().values,
       title = "Race Distribution",template = "plotly_dark")

currency_up["Education"].value_counts()

px.pie(currency_up, names = currency_up["Education"].value_counts().index, values = currency_up["Education"].value_counts().values,
       title = "Education Background Distribution Of Employee",template = "plotly_dark")

#bi-variate and multi-variate analysis

avg_sal = currency_up[["location","totalyearlycompensation"]].groupby("location").mean().sort_values("totalyearlycompensation",
            ascending = False).head(15)
avg_sal["count"] = currency_up.location.value_counts()
avg_sal = avg_sal.reset_index()
fig = px.bar(avg_sal,x= "location", y = "totalyearlycompensation",
       labels = {"location" : "Locations","totalyearlycompensation" : "Average Compensation","count":"Count"},
       title = "Jobs based on Locations",color_discrete_sequence = ["#6989ff"], template ="plotly_dark",
       color = "count",
       color_continuous_scale = "picnic",
      text = "count")

fig.update_traces(textposition = "outside")

currency_up[currency_up["location"] == "Chapel Hill, NC"]

min_sal = 10000
max_sal = 458000
avg_sal2 = currency_up[(currency_up["totalyearlycompensation"] >=min_sal) & (currency_up["totalyearlycompensation"] <= max_sal)].groupby("location").mean(
            )
avg_sal2["count"] = currency_up.location.value_counts()
avg_sal2 = avg_sal2.reset_index().sort_values("count",ascending = False).head(15)
avg_sal2.totalyearlycompensation = avg_sal2.totalyearlycompensation.round(2)
fig = px.bar(avg_sal2,x= "location", y = "totalyearlycompensation",
       labels = {"location" : "Locations","totalyearlycompensation" : "Average Compensation"},
       color = "count",
       text = "totalyearlycompensation",
       title = "Jobs based on Locations",color_continuous_scale = "picnic", template ="plotly_dark")
fig.update_traces (textposition = "outside",#texttemplate = "${.2f}".format(avg_sal.totalyearlycompensation.values))
                  )
fig.show()

high_sal_by_com = currency_up[["company","totalyearlycompensation","title"]].groupby(["company"]).max().sort_values(
'totalyearlycompensation',ascending= False ).head(10)
high_sal_by_com = high_sal_by_com.reset_index()

fig = px.bar(high_sal_by_com,x = "company" , y ="totalyearlycompensation",
       labels = {"company" : "Company" ,"totalyearlycompensation": "Highest salary Offered in Million"},
       template = "plotly_dark",hover_name = "title",color = "title",
       color_discrete_sequence = ["#0066ff","#f2f2f2","#33cc33"])
fig.show()

sal_by_exp = currency_up.groupby("yearsofexperience").mean().reset_index()
fig = px.line(x = sal_by_exp["yearsofexperience"], y = sal_by_exp["totalyearlycompensation"],template = "plotly_dark",
             labels = {"x" : "Years of Experience", "y" : "Average Salary"})
fig.show()

currency_up[currency_up["totalyearlycompensation"] >= 608000]

sal_by_gend = currency_up.groupby("gender").mean().head()
sal_by_gend["count"] = currency_up.gender.value_counts()
sal_by_gend = sal_by_gend.reset_index().sort_values("count")
fig = px.bar(sal_by_gend, x = "gender", y = "totalyearlycompensation", labels = {"gender":"Gender",
                                                                                   "totalyearlycompensation": "Salary"},
             title = "Average Yealy Compensation by Gender",
             template = "plotly_dark",
             color = "count",
             text = "count")

fig.show()

sal_by_race = currency_up.groupby("Race").mean().sort_values("totalyearlycompensation",ascending = False)
sal_by_race["count"] = currency_up.Race.value_counts()
sal_by_race = sal_by_race.reset_index()
fig = px.bar(sal_by_race, x = "Race", y = "totalyearlycompensation", labels = {"totalyearlycompensation": "Salary"},
             title = "Average Yealy Compensation by Race",
             template = "plotly_dark",
             color = "count",
             color_continuous_scale='Tealrose',
             text = "count")
fig.show()

sal_by_edu = currency_up.groupby("Education").mean().sort_values("totalyearlycompensation",ascending = False)
sal_by_edu["count"] = currency_up.Education.value_counts()
sal_by_edu = sal_by_edu.reset_index()

fig = px.bar(sal_by_edu, x = "Education", y = "totalyearlycompensation",hover_name = "Education",
             labels = {"totalyearlycompensation": "Salary"},
             title = "Average Yealy Compensation by Education", template = "plotly_dark",
             color = "count",
             color_continuous_scale='rdbu',
             text = "count")
fig.show()

top_5_com = ["Amazon" ,"Microsoft" ,"Google","Facebook","Apple"]
com_edu = currency_up[currency_up["company"].apply(lambda x: x in top_5_com )]
com_edu = com_edu[["company", "Education"]]
px.histogram(com_edu, x = "company", barmode = 'group',color = "Education",
                template = "plotly_dark",
                labels ={"company":"Company","count":"Number of Employees"},
            )

des_edu = currency_up[["company", "Education","title"]]
fig = px.histogram(des_edu, x = "title", color = "Education",barmode = "group",template = "plotly_dark")
fig.show()

currency_up["timestamp"] = pd.to_datetime(currency_up["timestamp"]).dt.date
currency_up["year"] = pd.DatetimeIndex(currency_up['timestamp']).year
currency_up["year"].value_counts()
px.histogram(currency_up, x = "year", color = "gender" ,barmode = "group", template = "plotly_dark"
            ,labels = {"year":"Year","gender":"Gender"})

loctn1 = loctn.head()
loc_list = list(loctn1.index)
loc_Jobs_title = currency_up[currency_up["location"].apply(lambda x: x in loc_list)]
px.histogram(loc_Jobs_title , x = "location", color = "title",template = "plotly_dark",
             #color_discrete_sequence= "salmon"
)